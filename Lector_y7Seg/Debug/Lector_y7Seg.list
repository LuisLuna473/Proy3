
Lector_y7Seg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e3c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004000  08004000  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004038  08004038  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004038  08004038  00005038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004040  08004040  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004040  08004040  00005040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004044  08004044  00005044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004048  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08004054  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08004054  00006110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0c9  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d59  00000000  00000000  00011105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  00012e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070c  00000000  00000000  00013788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a5c  00000000  00000000  00013e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5f2  00000000  00000000  000358f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1958  00000000  00000000  00041ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011383a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e4  00000000  00000000  00113880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00115d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003fe8 	.word	0x08003fe8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003fe8 	.word	0x08003fe8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b96a 	b.w	8000500 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	460c      	mov	r4, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14e      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000250:	4694      	mov	ip, r2
 8000252:	458c      	cmp	ip, r1
 8000254:	4686      	mov	lr, r0
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	d962      	bls.n	8000322 <__udivmoddi4+0xde>
 800025c:	b14a      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 800025e:	f1c2 0320 	rsb	r3, r2, #32
 8000262:	4091      	lsls	r1, r2
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	fa0c fc02 	lsl.w	ip, ip, r2
 800026c:	4319      	orrs	r1, r3
 800026e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000272:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000276:	fa1f f68c 	uxth.w	r6, ip
 800027a:	fbb1 f4f7 	udiv	r4, r1, r7
 800027e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000282:	fb07 1114 	mls	r1, r7, r4, r1
 8000286:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028a:	fb04 f106 	mul.w	r1, r4, r6
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f104 30ff 	add.w	r0, r4, #4294967295
 800029a:	f080 8112 	bcs.w	80004c2 <__udivmoddi4+0x27e>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 810f 	bls.w	80004c2 <__udivmoddi4+0x27e>
 80002a4:	3c02      	subs	r4, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a59      	subs	r1, r3, r1
 80002aa:	fa1f f38e 	uxth.w	r3, lr
 80002ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b2:	fb07 1110 	mls	r1, r7, r0, r1
 80002b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ba:	fb00 f606 	mul.w	r6, r0, r6
 80002be:	429e      	cmp	r6, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x94>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ca:	f080 80fc 	bcs.w	80004c6 <__udivmoddi4+0x282>
 80002ce:	429e      	cmp	r6, r3
 80002d0:	f240 80f9 	bls.w	80004c6 <__udivmoddi4+0x282>
 80002d4:	4463      	add	r3, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	1b9b      	subs	r3, r3, r6
 80002da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa6>
 80002e2:	40d3      	lsrs	r3, r2
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xba>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb4>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa6>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x150>
 8000306:	42a3      	cmp	r3, r4
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xcc>
 800030a:	4290      	cmp	r0, r2
 800030c:	f0c0 80f0 	bcc.w	80004f0 <__udivmoddi4+0x2ac>
 8000310:	1a86      	subs	r6, r0, r2
 8000312:	eb64 0303 	sbc.w	r3, r4, r3
 8000316:	2001      	movs	r0, #1
 8000318:	2d00      	cmp	r5, #0
 800031a:	d0e6      	beq.n	80002ea <__udivmoddi4+0xa6>
 800031c:	e9c5 6300 	strd	r6, r3, [r5]
 8000320:	e7e3      	b.n	80002ea <__udivmoddi4+0xa6>
 8000322:	2a00      	cmp	r2, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x204>
 8000328:	eba1 040c 	sub.w	r4, r1, ip
 800032c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000330:	fa1f f78c 	uxth.w	r7, ip
 8000334:	2101      	movs	r1, #1
 8000336:	fbb4 f6f8 	udiv	r6, r4, r8
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb08 4416 	mls	r4, r8, r6, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb07 f006 	mul.w	r0, r7, r6
 800034a:	4298      	cmp	r0, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x11c>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 34ff 	add.w	r4, r6, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x11a>
 8000358:	4298      	cmp	r0, r3
 800035a:	f200 80cd 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 800035e:	4626      	mov	r6, r4
 8000360:	1a1c      	subs	r4, r3, r0
 8000362:	fa1f f38e 	uxth.w	r3, lr
 8000366:	fbb4 f0f8 	udiv	r0, r4, r8
 800036a:	fb08 4410 	mls	r4, r8, r0, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb00 f707 	mul.w	r7, r0, r7
 8000376:	429f      	cmp	r7, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x148>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x146>
 8000384:	429f      	cmp	r7, r3
 8000386:	f200 80b0 	bhi.w	80004ea <__udivmoddi4+0x2a6>
 800038a:	4620      	mov	r0, r4
 800038c:	1bdb      	subs	r3, r3, r7
 800038e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x9c>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a4:	fa04 f301 	lsl.w	r3, r4, r1
 80003a8:	ea43 030c 	orr.w	r3, r3, ip
 80003ac:	40f4      	lsrs	r4, r6
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	0c38      	lsrs	r0, r7, #16
 80003b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b8:	fbb4 fef0 	udiv	lr, r4, r0
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	fb00 441e 	mls	r4, r0, lr, r4
 80003c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c8:	fb0e f90c 	mul.w	r9, lr, ip
 80003cc:	45a1      	cmp	r9, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d90a      	bls.n	80003ea <__udivmoddi4+0x1a6>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003da:	f080 8084 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80003de:	45a1      	cmp	r9, r4
 80003e0:	f240 8081 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80003e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	eba4 0409 	sub.w	r4, r4, r9
 80003ee:	fa1f f983 	uxth.w	r9, r3
 80003f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f6:	fb00 4413 	mls	r4, r0, r3, r4
 80003fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000402:	45a4      	cmp	ip, r4
 8000404:	d907      	bls.n	8000416 <__udivmoddi4+0x1d2>
 8000406:	193c      	adds	r4, r7, r4
 8000408:	f103 30ff 	add.w	r0, r3, #4294967295
 800040c:	d267      	bcs.n	80004de <__udivmoddi4+0x29a>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d965      	bls.n	80004de <__udivmoddi4+0x29a>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041a:	fba0 9302 	umull	r9, r3, r0, r2
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	429c      	cmp	r4, r3
 8000424:	46ce      	mov	lr, r9
 8000426:	469c      	mov	ip, r3
 8000428:	d351      	bcc.n	80004ce <__udivmoddi4+0x28a>
 800042a:	d04e      	beq.n	80004ca <__udivmoddi4+0x286>
 800042c:	b155      	cbz	r5, 8000444 <__udivmoddi4+0x200>
 800042e:	ebb8 030e 	subs.w	r3, r8, lr
 8000432:	eb64 040c 	sbc.w	r4, r4, ip
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	40cb      	lsrs	r3, r1
 800043c:	431e      	orrs	r6, r3
 800043e:	40cc      	lsrs	r4, r1
 8000440:	e9c5 6400 	strd	r6, r4, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	e750      	b.n	80002ea <__udivmoddi4+0xa6>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f103 	lsr.w	r1, r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa24 f303 	lsr.w	r3, r4, r3
 8000458:	4094      	lsls	r4, r2
 800045a:	430c      	orrs	r4, r1
 800045c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000460:	fa00 fe02 	lsl.w	lr, r0, r2
 8000464:	fa1f f78c 	uxth.w	r7, ip
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3110 	mls	r1, r8, r0, r3
 8000470:	0c23      	lsrs	r3, r4, #16
 8000472:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000476:	fb00 f107 	mul.w	r1, r0, r7
 800047a:	4299      	cmp	r1, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x24c>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 36ff 	add.w	r6, r0, #4294967295
 8000486:	d22c      	bcs.n	80004e2 <__udivmoddi4+0x29e>
 8000488:	4299      	cmp	r1, r3
 800048a:	d92a      	bls.n	80004e2 <__udivmoddi4+0x29e>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1a5b      	subs	r3, r3, r1
 8000492:	b2a4      	uxth	r4, r4
 8000494:	fbb3 f1f8 	udiv	r1, r3, r8
 8000498:	fb08 3311 	mls	r3, r8, r1, r3
 800049c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a0:	fb01 f307 	mul.w	r3, r1, r7
 80004a4:	42a3      	cmp	r3, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x276>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b0:	d213      	bcs.n	80004da <__udivmoddi4+0x296>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d911      	bls.n	80004da <__udivmoddi4+0x296>
 80004b6:	3902      	subs	r1, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	1ae4      	subs	r4, r4, r3
 80004bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c0:	e739      	b.n	8000336 <__udivmoddi4+0xf2>
 80004c2:	4604      	mov	r4, r0
 80004c4:	e6f0      	b.n	80002a8 <__udivmoddi4+0x64>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e706      	b.n	80002d8 <__udivmoddi4+0x94>
 80004ca:	45c8      	cmp	r8, r9
 80004cc:	d2ae      	bcs.n	800042c <__udivmoddi4+0x1e8>
 80004ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7a8      	b.n	800042c <__udivmoddi4+0x1e8>
 80004da:	4631      	mov	r1, r6
 80004dc:	e7ed      	b.n	80004ba <__udivmoddi4+0x276>
 80004de:	4603      	mov	r3, r0
 80004e0:	e799      	b.n	8000416 <__udivmoddi4+0x1d2>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e7d4      	b.n	8000490 <__udivmoddi4+0x24c>
 80004e6:	46d6      	mov	lr, sl
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1a6>
 80004ea:	4463      	add	r3, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e74d      	b.n	800038c <__udivmoddi4+0x148>
 80004f0:	4606      	mov	r6, r0
 80004f2:	4623      	mov	r3, r4
 80004f4:	4608      	mov	r0, r1
 80004f6:	e70f      	b.n	8000318 <__udivmoddi4+0xd4>
 80004f8:	3e02      	subs	r6, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	e730      	b.n	8000360 <__udivmoddi4+0x11c>
 80004fe:	bf00      	nop

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <updateDisplay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void updateDisplay(uint8_t count) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
    // Apagar todos los LEDs primero
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000514:	48a7      	ldr	r0, [pc, #668]	@ (80007b4 <updateDisplay+0x2b0>)
 8000516:	f001 ff69 	bl	80023ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000520:	48a4      	ldr	r0, [pc, #656]	@ (80007b4 <updateDisplay+0x2b0>)
 8000522:	f001 ff63 	bl	80023ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800052c:	48a1      	ldr	r0, [pc, #644]	@ (80007b4 <updateDisplay+0x2b0>)
 800052e:	f001 ff5d 	bl	80023ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000538:	489e      	ldr	r0, [pc, #632]	@ (80007b4 <updateDisplay+0x2b0>)
 800053a:	f001 ff57 	bl	80023ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000544:	489b      	ldr	r0, [pc, #620]	@ (80007b4 <updateDisplay+0x2b0>)
 8000546:	f001 ff51 	bl	80023ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000550:	4899      	ldr	r0, [pc, #612]	@ (80007b8 <updateDisplay+0x2b4>)
 8000552:	f001 ff4b 	bl	80023ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800055c:	4896      	ldr	r0, [pc, #600]	@ (80007b8 <updateDisplay+0x2b4>)
 800055e:	f001 ff45 	bl	80023ec <HAL_GPIO_WritePin>

    // Encender los segmentos correspondientes según el contador
    switch (count) {
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b08      	cmp	r3, #8
 8000566:	f200 8120 	bhi.w	80007aa <updateDisplay+0x2a6>
 800056a:	a201      	add	r2, pc, #4	@ (adr r2, 8000570 <updateDisplay+0x6c>)
 800056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000570:	08000761 	.word	0x08000761
 8000574:	08000747 	.word	0x08000747
 8000578:	08000709 	.word	0x08000709
 800057c:	080006cb 	.word	0x080006cb
 8000580:	08000699 	.word	0x08000699
 8000584:	0800065b 	.word	0x0800065b
 8000588:	08000611 	.word	0x08000611
 800058c:	080005eb 	.word	0x080005eb
 8000590:	08000595 	.word	0x08000595
        case 8:
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800059a:	4886      	ldr	r0, [pc, #536]	@ (80007b4 <updateDisplay+0x2b0>)
 800059c:	f001 ff26 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005a6:	4883      	ldr	r0, [pc, #524]	@ (80007b4 <updateDisplay+0x2b0>)
 80005a8:	f001 ff20 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005b2:	4880      	ldr	r0, [pc, #512]	@ (80007b4 <updateDisplay+0x2b0>)
 80005b4:	f001 ff1a 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005be:	487d      	ldr	r0, [pc, #500]	@ (80007b4 <updateDisplay+0x2b0>)
 80005c0:	f001 ff14 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ca:	487a      	ldr	r0, [pc, #488]	@ (80007b4 <updateDisplay+0x2b0>)
 80005cc:	f001 ff0e 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d6:	4878      	ldr	r0, [pc, #480]	@ (80007b8 <updateDisplay+0x2b4>)
 80005d8:	f001 ff08 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005e2:	4875      	ldr	r0, [pc, #468]	@ (80007b8 <updateDisplay+0x2b4>)
 80005e4:	f001 ff02 	bl	80023ec <HAL_GPIO_WritePin>
            break;
 80005e8:	e0e0      	b.n	80007ac <updateDisplay+0x2a8>
        case 7:
            // Encender segmentos para 7
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005f0:	4870      	ldr	r0, [pc, #448]	@ (80007b4 <updateDisplay+0x2b0>)
 80005f2:	f001 fefb 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005fc:	486d      	ldr	r0, [pc, #436]	@ (80007b4 <updateDisplay+0x2b0>)
 80005fe:	f001 fef5 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000608:	486a      	ldr	r0, [pc, #424]	@ (80007b4 <updateDisplay+0x2b0>)
 800060a:	f001 feef 	bl	80023ec <HAL_GPIO_WritePin>
            // ...
            break;
 800060e:	e0cd      	b.n	80007ac <updateDisplay+0x2a8>
        case 6:
            // Encender segmentos para 6
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	4867      	ldr	r0, [pc, #412]	@ (80007b4 <updateDisplay+0x2b0>)
 8000618:	f001 fee8 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000622:	4864      	ldr	r0, [pc, #400]	@ (80007b4 <updateDisplay+0x2b0>)
 8000624:	f001 fee2 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800062e:	4861      	ldr	r0, [pc, #388]	@ (80007b4 <updateDisplay+0x2b0>)
 8000630:	f001 fedc 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800063a:	485e      	ldr	r0, [pc, #376]	@ (80007b4 <updateDisplay+0x2b0>)
 800063c:	f001 fed6 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000646:	485c      	ldr	r0, [pc, #368]	@ (80007b8 <updateDisplay+0x2b4>)
 8000648:	f001 fed0 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000652:	4859      	ldr	r0, [pc, #356]	@ (80007b8 <updateDisplay+0x2b4>)
 8000654:	f001 feca 	bl	80023ec <HAL_GPIO_WritePin>
            // ...
            break;
 8000658:	e0a8      	b.n	80007ac <updateDisplay+0x2a8>
        case 5:
            // Encender segmentos para 5
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000660:	4854      	ldr	r0, [pc, #336]	@ (80007b4 <updateDisplay+0x2b0>)
 8000662:	f001 fec3 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066c:	4851      	ldr	r0, [pc, #324]	@ (80007b4 <updateDisplay+0x2b0>)
 800066e:	f001 febd 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000678:	484e      	ldr	r0, [pc, #312]	@ (80007b4 <updateDisplay+0x2b0>)
 800067a:	f001 feb7 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000684:	484c      	ldr	r0, [pc, #304]	@ (80007b8 <updateDisplay+0x2b4>)
 8000686:	f001 feb1 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000690:	4849      	ldr	r0, [pc, #292]	@ (80007b8 <updateDisplay+0x2b4>)
 8000692:	f001 feab 	bl	80023ec <HAL_GPIO_WritePin>
            // ...
            break;
 8000696:	e089      	b.n	80007ac <updateDisplay+0x2a8>
        case 4:
            // Encender segmentos para 4
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800069e:	4845      	ldr	r0, [pc, #276]	@ (80007b4 <updateDisplay+0x2b0>)
 80006a0:	f001 fea4 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006aa:	4842      	ldr	r0, [pc, #264]	@ (80007b4 <updateDisplay+0x2b0>)
 80006ac:	f001 fe9e 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006b6:	4840      	ldr	r0, [pc, #256]	@ (80007b8 <updateDisplay+0x2b4>)
 80006b8:	f001 fe98 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c2:	483d      	ldr	r0, [pc, #244]	@ (80007b8 <updateDisplay+0x2b4>)
 80006c4:	f001 fe92 	bl	80023ec <HAL_GPIO_WritePin>
            // ...
            break;
 80006c8:	e070      	b.n	80007ac <updateDisplay+0x2a8>
        case 3:
            // Encender segmentos para 3
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d0:	4838      	ldr	r0, [pc, #224]	@ (80007b4 <updateDisplay+0x2b0>)
 80006d2:	f001 fe8b 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006dc:	4835      	ldr	r0, [pc, #212]	@ (80007b4 <updateDisplay+0x2b0>)
 80006de:	f001 fe85 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006e8:	4832      	ldr	r0, [pc, #200]	@ (80007b4 <updateDisplay+0x2b0>)
 80006ea:	f001 fe7f 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006f4:	482f      	ldr	r0, [pc, #188]	@ (80007b4 <updateDisplay+0x2b0>)
 80006f6:	f001 fe79 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000700:	482d      	ldr	r0, [pc, #180]	@ (80007b8 <updateDisplay+0x2b4>)
 8000702:	f001 fe73 	bl	80023ec <HAL_GPIO_WritePin>
            // ...
            break;
 8000706:	e051      	b.n	80007ac <updateDisplay+0x2a8>
        case 2:
            // Encender segmentos para 2
        	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800070e:	4829      	ldr	r0, [pc, #164]	@ (80007b4 <updateDisplay+0x2b0>)
 8000710:	f001 fe6c 	bl	80023ec <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800071a:	4826      	ldr	r0, [pc, #152]	@ (80007b4 <updateDisplay+0x2b0>)
 800071c:	f001 fe66 	bl	80023ec <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000726:	4823      	ldr	r0, [pc, #140]	@ (80007b4 <updateDisplay+0x2b0>)
 8000728:	f001 fe60 	bl	80023ec <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000732:	4820      	ldr	r0, [pc, #128]	@ (80007b4 <updateDisplay+0x2b0>)
 8000734:	f001 fe5a 	bl	80023ec <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800073e:	481e      	ldr	r0, [pc, #120]	@ (80007b8 <updateDisplay+0x2b4>)
 8000740:	f001 fe54 	bl	80023ec <HAL_GPIO_WritePin>
            // ...
            break;
 8000744:	e032      	b.n	80007ac <updateDisplay+0x2a8>
        case 1:
            // Encender segmentos para 1
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800074c:	4819      	ldr	r0, [pc, #100]	@ (80007b4 <updateDisplay+0x2b0>)
 800074e:	f001 fe4d 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000758:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <updateDisplay+0x2b0>)
 800075a:	f001 fe47 	bl	80023ec <HAL_GPIO_WritePin>
            // ...
            break;
 800075e:	e025      	b.n	80007ac <updateDisplay+0x2a8>
        case 0:
            // Encender segmentos para 0
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000766:	4813      	ldr	r0, [pc, #76]	@ (80007b4 <updateDisplay+0x2b0>)
 8000768:	f001 fe40 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000772:	4810      	ldr	r0, [pc, #64]	@ (80007b4 <updateDisplay+0x2b0>)
 8000774:	f001 fe3a 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <updateDisplay+0x2b0>)
 8000780:	f001 fe34 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078a:	480a      	ldr	r0, [pc, #40]	@ (80007b4 <updateDisplay+0x2b0>)
 800078c:	f001 fe2e 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000796:	4807      	ldr	r0, [pc, #28]	@ (80007b4 <updateDisplay+0x2b0>)
 8000798:	f001 fe28 	bl	80023ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <updateDisplay+0x2b4>)
 80007a4:	f001 fe22 	bl	80023ec <HAL_GPIO_WritePin>
            // ...
            break;
 80007a8:	e000      	b.n	80007ac <updateDisplay+0x2a8>
        default:
            // Manejar otros casos si es necesario
            break;
 80007aa:	bf00      	nop
    }
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020800 	.word	0x40020800

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fdba 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f856 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f942 	bl	8000a50 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007cc:	f000 f8b2 	bl	8000934 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80007d0:	f000 f8ea 	bl	80009a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80007d4:	f000 f912 	bl	80009fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80007d8:	481e      	ldr	r0, [pc, #120]	@ (8000854 <main+0x98>)
 80007da:	f000 fe87 	bl	80014ec <HAL_ADC_Start_IT>
  HAL_UART_Receive_IT(&huart3, buffer, 1);
 80007de:	2201      	movs	r2, #1
 80007e0:	491d      	ldr	r1, [pc, #116]	@ (8000858 <main+0x9c>)
 80007e2:	481e      	ldr	r0, [pc, #120]	@ (800085c <main+0xa0>)
 80007e4:	f002 fc59 	bl	800309a <HAL_UART_Receive_IT>

  updateDisplay(dis);   //regresar a esta linea donde inicia
 80007e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <main+0xa4>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fe89 	bl	8000504 <updateDisplay>
  while (1)
  {
	  //HAL_I2C_Master_Transmit_IT(&hi2c1, (uint16_t)0x08 , i2c_tx_buffer, sizeof(i2c_tx_buffer));


	  parqueo1();
 80007f2:	f000 f997 	bl	8000b24 <parqueo1>
	  p1 = 1;
 80007f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <main+0xa8>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(50);
 80007fc:	2032      	movs	r0, #50	@ 0x32
 80007fe:	f000 fe0d 	bl	800141c <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 8000802:	4814      	ldr	r0, [pc, #80]	@ (8000854 <main+0x98>)
 8000804:	f000 fe72 	bl	80014ec <HAL_ADC_Start_IT>

	  HAL_Delay(50);
 8000808:	2032      	movs	r0, #50	@ 0x32
 800080a:	f000 fe07 	bl	800141c <HAL_Delay>


	  parqueo2();
 800080e:	f000 f9a9 	bl	8000b64 <parqueo2>
	  p2 = 1;
 8000812:	4b15      	ldr	r3, [pc, #84]	@ (8000868 <main+0xac>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_IT(&hadc1);
 8000818:	480e      	ldr	r0, [pc, #56]	@ (8000854 <main+0x98>)
 800081a:	f000 fe67 	bl	80014ec <HAL_ADC_Start_IT>

	  HAL_Delay(50);
 800081e:	2032      	movs	r0, #50	@ 0x32
 8000820:	f000 fdfc 	bl	800141c <HAL_Delay>

	  parqueo3();
 8000824:	f000 f9be 	bl	8000ba4 <parqueo3>
	  p3 = 1;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <main+0xb0>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_IT(&hadc1);
 800082e:	4809      	ldr	r0, [pc, #36]	@ (8000854 <main+0x98>)
 8000830:	f000 fe5c 	bl	80014ec <HAL_ADC_Start_IT>
	  HAL_Delay(50);
 8000834:	2032      	movs	r0, #50	@ 0x32
 8000836:	f000 fdf1 	bl	800141c <HAL_Delay>

	  parqueo4();
 800083a:	f000 f9d3 	bl	8000be4 <parqueo4>
	  p4 = 1;
 800083e:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <main+0xb4>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start_IT(&hadc1);
 8000844:	4803      	ldr	r0, [pc, #12]	@ (8000854 <main+0x98>)
 8000846:	f000 fe51 	bl	80014ec <HAL_ADC_Start_IT>
	  HAL_Delay(50);
 800084a:	2032      	movs	r0, #50	@ 0x32
 800084c:	f000 fde6 	bl	800141c <HAL_Delay>
	  parqueo1();
 8000850:	bf00      	nop
 8000852:	e7ce      	b.n	80007f2 <main+0x36>
 8000854:	20000028 	.word	0x20000028
 8000858:	20000100 	.word	0x20000100
 800085c:	200000b8 	.word	0x200000b8
 8000860:	20000100 	.word	0x20000100
 8000864:	20000106 	.word	0x20000106
 8000868:	20000107 	.word	0x20000107
 800086c:	20000108 	.word	0x20000108
 8000870:	20000109 	.word	0x20000109

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	@ 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2234      	movs	r2, #52	@ 0x34
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fb84 	bl	8003f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b23      	ldr	r3, [pc, #140]	@ (800092c <SystemClock_Config+0xb8>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	4a22      	ldr	r2, [pc, #136]	@ (800092c <SystemClock_Config+0xb8>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a8:	4b20      	ldr	r3, [pc, #128]	@ (800092c <SystemClock_Config+0xb8>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b4:	2300      	movs	r3, #0
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <SystemClock_Config+0xbc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000930 <SystemClock_Config+0xbc>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <SystemClock_Config+0xbc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008dc:	2310      	movs	r3, #16
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 f85d 	bl	80029a8 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008f4:	f000 fb52 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fd84 	bl	8002420 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800091e:	f000 fb3d 	bl	8000f9c <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	@ 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_ADC1_Init+0x68>)
 800093a:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <MX_ADC1_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_ADC1_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_ADC1_Init+0x68>)
 8000946:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 800094a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800094c:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MX_ADC1_Init+0x68>)
 800094e:	2201      	movs	r2, #1
 8000950:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000952:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_ADC1_Init+0x68>)
 8000954:	2201      	movs	r2, #1
 8000956:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000958:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_ADC1_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_ADC1_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_ADC1_Init+0x68>)
 8000968:	4a0e      	ldr	r2, [pc, #56]	@ (80009a4 <MX_ADC1_Init+0x70>)
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_ADC1_Init+0x68>)
 800096e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000972:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_ADC1_Init+0x68>)
 8000976:	2204      	movs	r2, #4
 8000978:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_ADC1_Init+0x68>)
 800097c:	2200      	movs	r2, #0
 800097e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_ADC1_Init+0x68>)
 8000984:	2201      	movs	r2, #1
 8000986:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_ADC1_Init+0x68>)
 800098a:	f000 fd6b 	bl	8001464 <HAL_ADC_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0x64>
  {
    Error_Handler();
 8000994:	f000 fb02 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000028 	.word	0x20000028
 80009a0:	40012000 	.word	0x40012000
 80009a4:	0f000001 	.word	0x0f000001

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <MX_USART2_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f002 fa80 	bl	8002ee4 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 fad7 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000070 	.word	0x20000070
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <MX_USART3_UART_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_USART3_UART_Init+0x4c>)
 8000a34:	f002 fa56 	bl	8002ee4 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f000 faad 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000b8 	.word	0x200000b8
 8000a4c:	40004800 	.word	0x40004800

08000a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0304 	and.w	r3, r3, #4
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a23      	ldr	r2, [pc, #140]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_GPIO_Init+0xc8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED7_Pin|LED6_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000ac0:	4816      	ldr	r0, [pc, #88]	@ (8000b1c <MX_GPIO_Init+0xcc>)
 8000ac2:	f001 fc93 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 8000acc:	4814      	ldr	r0, [pc, #80]	@ (8000b20 <MX_GPIO_Init+0xd0>)
 8000ace:	f001 fc8d 	bl	80023ec <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED7_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED7_Pin|LED6_Pin;
 8000ad2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000adc:	2302      	movs	r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <MX_GPIO_Init+0xcc>)
 8000aec:	f001 faea 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED4_Pin LED3_Pin LED2_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin
 8000af0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000af4:	60fb      	str	r3, [r7, #12]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000afa:	2302      	movs	r3, #2
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_GPIO_Init+0xd0>)
 8000b0a:	f001 fadb 	bl	80020c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020000 	.word	0x40020000

08000b24 <parqueo1>:

/* USER CODE BEGIN 4 */

void parqueo1(void){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_9;
 8000b36:	2309      	movs	r3, #9
 8000b38:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <parqueo1+0x3c>)
 8000b48:	f000 fee0 	bl	800190c <HAL_ADC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <parqueo1+0x32>
	  {
	    Error_Handler();
 8000b52:	f000 fa23 	bl	8000f9c <Error_Handler>
	  }
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000028 	.word	0x20000028

08000b64 <parqueo2>:
void parqueo2(void){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	//FillRect(0,0,40,40,0xFFFF);
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_10;
 8000b76:	230a      	movs	r3, #10
 8000b78:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <parqueo2+0x3c>)
 8000b88:	f000 fec0 	bl	800190c <HAL_ADC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <parqueo2+0x32>
	  {
	    Error_Handler();
 8000b92:	f000 fa03 	bl	8000f9c <Error_Handler>
	  }
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000028 	.word	0x20000028

08000ba4 <parqueo3>:
void parqueo3(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_12;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <parqueo3+0x3c>)
 8000bc8:	f000 fea0 	bl	800190c <HAL_ADC_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <parqueo3+0x32>
	  {
	    Error_Handler();
 8000bd2:	f000 f9e3 	bl	8000f9c <Error_Handler>
	  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000028 	.word	0x20000028

08000be4 <parqueo4>:
void parqueo4(void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_13;
 8000bf6:	230d      	movs	r3, #13
 8000bf8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c02:	463b      	mov	r3, r7
 8000c04:	4619      	mov	r1, r3
 8000c06:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <parqueo4+0x3c>)
 8000c08:	f000 fe80 	bl	800190c <HAL_ADC_ConfigChannel>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <parqueo4+0x32>
	  {
	    Error_Handler();
 8000c12:	f000 f9c3 	bl	8000f9c <Error_Handler>
	  }
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000028 	.word	0x20000028

08000c24 <transmit_uart3>:
void transmit_uart(char *string){
		  uint8_t len = strlen(string);
		  HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 200);
}

void transmit_uart3(char *strin){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(strin);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fae9 	bl	8000204 <strlen>
 8000c32:	4603      	mov	r3, r0
 8000c34:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3, (uint8_t*) strin, len, 200);
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	23c8      	movs	r3, #200	@ 0xc8
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <transmit_uart3+0x28>)
 8000c40:	f002 f9a0 	bl	8002f84 <HAL_UART_Transmit>
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000b8 	.word	0x200000b8

08000c50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a8a      	ldr	r2, [pc, #552]	@ (8000e84 <HAL_ADC_ConvCpltCallback+0x234>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	f040 810c 	bne.w	8000e7a <HAL_ADC_ConvCpltCallback+0x22a>
    	if(p1 == 1){
 8000c62:	4b89      	ldr	r3, [pc, #548]	@ (8000e88 <HAL_ADC_ConvCpltCallback+0x238>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d13e      	bne.n	8000ce8 <HAL_ADC_ConvCpltCallback+0x98>
    		adc = HAL_ADC_GetValue(&hadc1);
 8000c6a:	4886      	ldr	r0, [pc, #536]	@ (8000e84 <HAL_ADC_ConvCpltCallback+0x234>)
 8000c6c:	f000 fe2c 	bl	80018c8 <HAL_ADC_GetValue>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b85      	ldr	r3, [pc, #532]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000c76:	701a      	strb	r2, [r3, #0]
    		if(adc < 35){
 8000c78:	4b84      	ldr	r3, [pc, #528]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b22      	cmp	r3, #34	@ 0x22
 8000c7e:	d80d      	bhi.n	8000c9c <HAL_ADC_ConvCpltCallback+0x4c>
    			uno = 1;
 8000c80:	4b83      	ldr	r3, [pc, #524]	@ (8000e90 <HAL_ADC_ConvCpltCallback+0x240>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
    			transmit_uart3("A");
 8000c86:	4883      	ldr	r0, [pc, #524]	@ (8000e94 <HAL_ADC_ConvCpltCallback+0x244>)
 8000c88:	f7ff ffcc 	bl	8000c24 <transmit_uart3>
    			p_dispo |= (1<< 4);//Hacer 1 el bit 4
 8000c8c:	4b82      	ldr	r3, [pc, #520]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f043 0310 	orr.w	r3, r3, #16
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b80      	ldr	r3, [pc, #512]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e022      	b.n	8000ce2 <HAL_ADC_ConvCpltCallback+0x92>

			}else if(adc >= 10 && adc < 100){
 8000c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b09      	cmp	r3, #9
 8000ca2:	d911      	bls.n	8000cc8 <HAL_ADC_ConvCpltCallback+0x78>
 8000ca4:	4b79      	ldr	r3, [pc, #484]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b63      	cmp	r3, #99	@ 0x63
 8000caa:	d80d      	bhi.n	8000cc8 <HAL_ADC_ConvCpltCallback+0x78>
				uno = 0;
 8000cac:	4b78      	ldr	r3, [pc, #480]	@ (8000e90 <HAL_ADC_ConvCpltCallback+0x240>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
				p_dispo &= ~(1<< 4);
 8000cb2:	4b79      	ldr	r3, [pc, #484]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	f023 0310 	bic.w	r3, r3, #16
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b76      	ldr	r3, [pc, #472]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000cbe:	701a      	strb	r2, [r3, #0]
				transmit_uart3("a");
 8000cc0:	4876      	ldr	r0, [pc, #472]	@ (8000e9c <HAL_ADC_ConvCpltCallback+0x24c>)
 8000cc2:	f7ff ffaf 	bl	8000c24 <transmit_uart3>
 8000cc6:	e00c      	b.n	8000ce2 <HAL_ADC_ConvCpltCallback+0x92>

			}else{
				uno = 0;
 8000cc8:	4b71      	ldr	r3, [pc, #452]	@ (8000e90 <HAL_ADC_ConvCpltCallback+0x240>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
				p_dispo &= ~(1<< 4);
 8000cce:	4b72      	ldr	r3, [pc, #456]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	f023 0310 	bic.w	r3, r3, #16
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000cda:	701a      	strb	r2, [r3, #0]
				transmit_uart3("a");
 8000cdc:	486f      	ldr	r0, [pc, #444]	@ (8000e9c <HAL_ADC_ConvCpltCallback+0x24c>)
 8000cde:	f7ff ffa1 	bl	8000c24 <transmit_uart3>
			}
			p1 = 0;
 8000ce2:	4b69      	ldr	r3, [pc, #420]	@ (8000e88 <HAL_ADC_ConvCpltCallback+0x238>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]

    	}
    	if(p2 == 1){
 8000ce8:	4b6d      	ldr	r3, [pc, #436]	@ (8000ea0 <HAL_ADC_ConvCpltCallback+0x250>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d13e      	bne.n	8000d6e <HAL_ADC_ConvCpltCallback+0x11e>
    		adc = HAL_ADC_GetValue(&hadc1);
 8000cf0:	4864      	ldr	r0, [pc, #400]	@ (8000e84 <HAL_ADC_ConvCpltCallback+0x234>)
 8000cf2:	f000 fde9 	bl	80018c8 <HAL_ADC_GetValue>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b64      	ldr	r3, [pc, #400]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000cfc:	701a      	strb	r2, [r3, #0]
    		if(adc < 35){
 8000cfe:	4b63      	ldr	r3, [pc, #396]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b22      	cmp	r3, #34	@ 0x22
 8000d04:	d80d      	bhi.n	8000d22 <HAL_ADC_ConvCpltCallback+0xd2>
    			dos = 1;
 8000d06:	4b67      	ldr	r3, [pc, #412]	@ (8000ea4 <HAL_ADC_ConvCpltCallback+0x254>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
    			p_dispo |= (1<< 5);
 8000d0c:	4b62      	ldr	r3, [pc, #392]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	f043 0320 	orr.w	r3, r3, #32
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b60      	ldr	r3, [pc, #384]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000d18:	701a      	strb	r2, [r3, #0]
    			transmit_uart3("B");
 8000d1a:	4863      	ldr	r0, [pc, #396]	@ (8000ea8 <HAL_ADC_ConvCpltCallback+0x258>)
 8000d1c:	f7ff ff82 	bl	8000c24 <transmit_uart3>
 8000d20:	e022      	b.n	8000d68 <HAL_ADC_ConvCpltCallback+0x118>

			}else if(adc >= 10 && adc < 100){
 8000d22:	4b5a      	ldr	r3, [pc, #360]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b09      	cmp	r3, #9
 8000d28:	d911      	bls.n	8000d4e <HAL_ADC_ConvCpltCallback+0xfe>
 8000d2a:	4b58      	ldr	r3, [pc, #352]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b63      	cmp	r3, #99	@ 0x63
 8000d30:	d80d      	bhi.n	8000d4e <HAL_ADC_ConvCpltCallback+0xfe>
				dos = 0;
 8000d32:	4b5c      	ldr	r3, [pc, #368]	@ (8000ea4 <HAL_ADC_ConvCpltCallback+0x254>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
				p_dispo &= ~(1<< 5);
 8000d38:	4b57      	ldr	r3, [pc, #348]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	f023 0320 	bic.w	r3, r3, #32
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4b55      	ldr	r3, [pc, #340]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000d44:	701a      	strb	r2, [r3, #0]
				transmit_uart3("b");
 8000d46:	4859      	ldr	r0, [pc, #356]	@ (8000eac <HAL_ADC_ConvCpltCallback+0x25c>)
 8000d48:	f7ff ff6c 	bl	8000c24 <transmit_uart3>
 8000d4c:	e00c      	b.n	8000d68 <HAL_ADC_ConvCpltCallback+0x118>

			}else{
				dos = 0;
 8000d4e:	4b55      	ldr	r3, [pc, #340]	@ (8000ea4 <HAL_ADC_ConvCpltCallback+0x254>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
				p_dispo &= ~(1<< 5);
 8000d54:	4b50      	ldr	r3, [pc, #320]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f023 0320 	bic.w	r3, r3, #32
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000d60:	701a      	strb	r2, [r3, #0]
				transmit_uart3("b");
 8000d62:	4852      	ldr	r0, [pc, #328]	@ (8000eac <HAL_ADC_ConvCpltCallback+0x25c>)
 8000d64:	f7ff ff5e 	bl	8000c24 <transmit_uart3>
			}
    		p2 = 0;
 8000d68:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea0 <HAL_ADC_ConvCpltCallback+0x250>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]

    	}
    	if(p3 == 1){
 8000d6e:	4b50      	ldr	r3, [pc, #320]	@ (8000eb0 <HAL_ADC_ConvCpltCallback+0x260>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d13e      	bne.n	8000df4 <HAL_ADC_ConvCpltCallback+0x1a4>
    		adc = HAL_ADC_GetValue(&hadc1);
 8000d76:	4843      	ldr	r0, [pc, #268]	@ (8000e84 <HAL_ADC_ConvCpltCallback+0x234>)
 8000d78:	f000 fda6 	bl	80018c8 <HAL_ADC_GetValue>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b42      	ldr	r3, [pc, #264]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000d82:	701a      	strb	r2, [r3, #0]
    		if(adc < 35){
 8000d84:	4b41      	ldr	r3, [pc, #260]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b22      	cmp	r3, #34	@ 0x22
 8000d8a:	d80d      	bhi.n	8000da8 <HAL_ADC_ConvCpltCallback+0x158>
    			tres = 1;
 8000d8c:	4b49      	ldr	r3, [pc, #292]	@ (8000eb4 <HAL_ADC_ConvCpltCallback+0x264>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
    			p_dispo |= (1<< 6);
 8000d92:	4b41      	ldr	r3, [pc, #260]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000d9e:	701a      	strb	r2, [r3, #0]
    			transmit_uart3("C");
 8000da0:	4845      	ldr	r0, [pc, #276]	@ (8000eb8 <HAL_ADC_ConvCpltCallback+0x268>)
 8000da2:	f7ff ff3f 	bl	8000c24 <transmit_uart3>
 8000da6:	e022      	b.n	8000dee <HAL_ADC_ConvCpltCallback+0x19e>

			}else if(adc >= 10 && adc < 100){
 8000da8:	4b38      	ldr	r3, [pc, #224]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b09      	cmp	r3, #9
 8000dae:	d911      	bls.n	8000dd4 <HAL_ADC_ConvCpltCallback+0x184>
 8000db0:	4b36      	ldr	r3, [pc, #216]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b63      	cmp	r3, #99	@ 0x63
 8000db6:	d80d      	bhi.n	8000dd4 <HAL_ADC_ConvCpltCallback+0x184>
				tres = 0;
 8000db8:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb4 <HAL_ADC_ConvCpltCallback+0x264>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
				p_dispo &= ~(1<< 6);
 8000dbe:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000dca:	701a      	strb	r2, [r3, #0]
				transmit_uart3("c");
 8000dcc:	483b      	ldr	r0, [pc, #236]	@ (8000ebc <HAL_ADC_ConvCpltCallback+0x26c>)
 8000dce:	f7ff ff29 	bl	8000c24 <transmit_uart3>
 8000dd2:	e00c      	b.n	8000dee <HAL_ADC_ConvCpltCallback+0x19e>

			}else{
				tres = 0;
 8000dd4:	4b37      	ldr	r3, [pc, #220]	@ (8000eb4 <HAL_ADC_ConvCpltCallback+0x264>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
				p_dispo &= ~(1<< 6);
 8000dda:	4b2f      	ldr	r3, [pc, #188]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000de6:	701a      	strb	r2, [r3, #0]
				transmit_uart3("c");
 8000de8:	4834      	ldr	r0, [pc, #208]	@ (8000ebc <HAL_ADC_ConvCpltCallback+0x26c>)
 8000dea:	f7ff ff1b 	bl	8000c24 <transmit_uart3>
			}
			p3 = 0;
 8000dee:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <HAL_ADC_ConvCpltCallback+0x260>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]

    	}
    	if(p4 == 1){
 8000df4:	4b32      	ldr	r3, [pc, #200]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x270>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d13e      	bne.n	8000e7a <HAL_ADC_ConvCpltCallback+0x22a>
    		adc = HAL_ADC_GetValue(&hadc1);
 8000dfc:	4821      	ldr	r0, [pc, #132]	@ (8000e84 <HAL_ADC_ConvCpltCallback+0x234>)
 8000dfe:	f000 fd63 	bl	80018c8 <HAL_ADC_GetValue>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000e08:	701a      	strb	r2, [r3, #0]
    		if(adc < 35){
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b22      	cmp	r3, #34	@ 0x22
 8000e10:	d80d      	bhi.n	8000e2e <HAL_ADC_ConvCpltCallback+0x1de>
    			cuatro = 1;
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
    			p_dispo |= (1<< 7);
 8000e18:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000e24:	701a      	strb	r2, [r3, #0]
    			transmit_uart3("D");
 8000e26:	4828      	ldr	r0, [pc, #160]	@ (8000ec8 <HAL_ADC_ConvCpltCallback+0x278>)
 8000e28:	f7ff fefc 	bl	8000c24 <transmit_uart3>
 8000e2c:	e022      	b.n	8000e74 <HAL_ADC_ConvCpltCallback+0x224>
			}else if(adc >= 10 && adc < 100){
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b09      	cmp	r3, #9
 8000e34:	d911      	bls.n	8000e5a <HAL_ADC_ConvCpltCallback+0x20a>
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_ADC_ConvCpltCallback+0x23c>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b63      	cmp	r3, #99	@ 0x63
 8000e3c:	d80d      	bhi.n	8000e5a <HAL_ADC_ConvCpltCallback+0x20a>
				cuatro = 0;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
				p_dispo &= ~(1<< 7);
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000e50:	701a      	strb	r2, [r3, #0]
				transmit_uart3("d");
 8000e52:	481e      	ldr	r0, [pc, #120]	@ (8000ecc <HAL_ADC_ConvCpltCallback+0x27c>)
 8000e54:	f7ff fee6 	bl	8000c24 <transmit_uart3>
 8000e58:	e00c      	b.n	8000e74 <HAL_ADC_ConvCpltCallback+0x224>

			}else{
				cuatro = 0;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <HAL_ADC_ConvCpltCallback+0x274>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
				p_dispo &= ~(1<< 7);
 8000e60:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <HAL_ADC_ConvCpltCallback+0x248>)
 8000e6c:	701a      	strb	r2, [r3, #0]
				transmit_uart3("d");
 8000e6e:	4817      	ldr	r0, [pc, #92]	@ (8000ecc <HAL_ADC_ConvCpltCallback+0x27c>)
 8000e70:	f7ff fed8 	bl	8000c24 <transmit_uart3>
			}
			p4 = 0;
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_ADC_ConvCpltCallback+0x270>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
    	}
    }
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000028 	.word	0x20000028
 8000e88:	20000106 	.word	0x20000106
 8000e8c:	20000101 	.word	0x20000101
 8000e90:	20000102 	.word	0x20000102
 8000e94:	08004000 	.word	0x08004000
 8000e98:	2000010a 	.word	0x2000010a
 8000e9c:	08004004 	.word	0x08004004
 8000ea0:	20000107 	.word	0x20000107
 8000ea4:	20000103 	.word	0x20000103
 8000ea8:	08004008 	.word	0x08004008
 8000eac:	0800400c 	.word	0x0800400c
 8000eb0:	20000108 	.word	0x20000108
 8000eb4:	20000104 	.word	0x20000104
 8000eb8:	08004010 	.word	0x08004010
 8000ebc:	08004014 	.word	0x08004014
 8000ec0:	20000109 	.word	0x20000109
 8000ec4:	20000105 	.word	0x20000105
 8000ec8:	08004018 	.word	0x08004018
 8000ecc:	0800401c 	.word	0x0800401c

08000ed0 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	/*HAL_UART_Transmit(huart, buffer, sizeof(buffer), 10);
	HAL_UART_Receive_IT(&huart1, buffer, 8);*/
	if(huart->Instance == USART3){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a2b      	ldr	r2, [pc, #172]	@ (8000f8c <HAL_UART_RxCpltCallback+0xbc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d14b      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0xaa>
		//HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 10);
		  if(buffer[0] == '0'){
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b30      	cmp	r3, #48	@ 0x30
 8000ee8:	d103      	bne.n	8000ef2 <HAL_UART_RxCpltCallback+0x22>
			  dis = 0;
 8000eea:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
 8000ef0:	e03e      	b.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
		  }else if (buffer[0] == '1'){
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b31      	cmp	r3, #49	@ 0x31
 8000ef8:	d103      	bne.n	8000f02 <HAL_UART_RxCpltCallback+0x32>
			  dis = 1;
 8000efa:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e036      	b.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
		  }else if(buffer[0] == '2'){
 8000f02:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b32      	cmp	r3, #50	@ 0x32
 8000f08:	d103      	bne.n	8000f12 <HAL_UART_RxCpltCallback+0x42>
			  dis = 2;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	e02e      	b.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
		  }else if(buffer[0] == '3'){
 8000f12:	4b1f      	ldr	r3, [pc, #124]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b33      	cmp	r3, #51	@ 0x33
 8000f18:	d103      	bne.n	8000f22 <HAL_UART_RxCpltCallback+0x52>
			  dis = 3;
 8000f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e026      	b.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
		  }else if(buffer[0] == '4'){
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b34      	cmp	r3, #52	@ 0x34
 8000f28:	d103      	bne.n	8000f32 <HAL_UART_RxCpltCallback+0x62>
			  dis = 4;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e01e      	b.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
		  }else if(buffer[0] == '5'){
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b35      	cmp	r3, #53	@ 0x35
 8000f38:	d103      	bne.n	8000f42 <HAL_UART_RxCpltCallback+0x72>
			  dis = 5;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e016      	b.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
		  }else if(buffer[0] == '6'){
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b36      	cmp	r3, #54	@ 0x36
 8000f48:	d103      	bne.n	8000f52 <HAL_UART_RxCpltCallback+0x82>
			  dis = 6;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000f4c:	2206      	movs	r2, #6
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e00e      	b.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
		  }else if(buffer[0] == '7'){
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b37      	cmp	r3, #55	@ 0x37
 8000f58:	d103      	bne.n	8000f62 <HAL_UART_RxCpltCallback+0x92>
			  dis = 7;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e006      	b.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
		  }else if(buffer[0] == '8'){
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b38      	cmp	r3, #56	@ 0x38
 8000f68:	d102      	bne.n	8000f70 <HAL_UART_RxCpltCallback+0xa0>
			  dis = 8;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000f6c:	2208      	movs	r2, #8
 8000f6e:	701a      	strb	r2, [r3, #0]
		  }
		  updateDisplay(dis);
 8000f70:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <HAL_UART_RxCpltCallback+0xc4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fac5 	bl	8000504 <updateDisplay>
	}
	HAL_UART_Receive_IT(&huart3, buffer, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4904      	ldr	r1, [pc, #16]	@ (8000f90 <HAL_UART_RxCpltCallback+0xc0>)
 8000f7e:	4806      	ldr	r0, [pc, #24]	@ (8000f98 <HAL_UART_RxCpltCallback+0xc8>)
 8000f80:	f002 f88b 	bl	800309a <HAL_UART_Receive_IT>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	20000100 	.word	0x20000100
 8000f94:	20000100 	.word	0x20000100
 8000f98:	200000b8 	.word	0x200000b8

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <Error_Handler+0x8>

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a28      	ldr	r2, [pc, #160]	@ (80010b8 <HAL_ADC_MspInit+0xc0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d149      	bne.n	80010ae <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	4a26      	ldr	r2, [pc, #152]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001028:	6453      	str	r3, [r2, #68]	@ 0x44
 800102a:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a1f      	ldr	r2, [pc, #124]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a18      	ldr	r2, [pc, #96]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <HAL_ADC_MspInit+0xc4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800106e:	230d      	movs	r3, #13
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <HAL_ADC_MspInit+0xc8>)
 8001082:	f001 f81f 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001086:	2302      	movs	r3, #2
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	480a      	ldr	r0, [pc, #40]	@ (80010c4 <HAL_ADC_MspInit+0xcc>)
 800109a:	f001 f813 	bl	80020c4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2012      	movs	r0, #18
 80010a4:	f000 ff45 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a8:	2012      	movs	r0, #18
 80010aa:	f000 ff5e 	bl	8001f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	@ 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020400 	.word	0x40020400

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	@ 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a49      	ldr	r2, [pc, #292]	@ (800120c <HAL_UART_MspInit+0x144>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d134      	bne.n	8001154 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	4b48      	ldr	r3, [pc, #288]	@ (8001210 <HAL_UART_MspInit+0x148>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a47      	ldr	r2, [pc, #284]	@ (8001210 <HAL_UART_MspInit+0x148>)
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	4b45      	ldr	r3, [pc, #276]	@ (8001210 <HAL_UART_MspInit+0x148>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	4b41      	ldr	r3, [pc, #260]	@ (8001210 <HAL_UART_MspInit+0x148>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a40      	ldr	r2, [pc, #256]	@ (8001210 <HAL_UART_MspInit+0x148>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b3e      	ldr	r3, [pc, #248]	@ (8001210 <HAL_UART_MspInit+0x148>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001122:	230c      	movs	r3, #12
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001132:	2307      	movs	r3, #7
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	4835      	ldr	r0, [pc, #212]	@ (8001214 <HAL_UART_MspInit+0x14c>)
 800113e:	f000 ffc1 	bl	80020c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2026      	movs	r0, #38	@ 0x26
 8001148:	f000 fef3 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800114c:	2026      	movs	r0, #38	@ 0x26
 800114e:	f000 ff0c 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001152:	e057      	b.n	8001204 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a2f      	ldr	r2, [pc, #188]	@ (8001218 <HAL_UART_MspInit+0x150>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d152      	bne.n	8001204 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <HAL_UART_MspInit+0x148>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	4a2a      	ldr	r2, [pc, #168]	@ (8001210 <HAL_UART_MspInit+0x148>)
 8001168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800116c:	6413      	str	r3, [r2, #64]	@ 0x40
 800116e:	4b28      	ldr	r3, [pc, #160]	@ (8001210 <HAL_UART_MspInit+0x148>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <HAL_UART_MspInit+0x148>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <HAL_UART_MspInit+0x148>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <HAL_UART_MspInit+0x148>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <HAL_UART_MspInit+0x148>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <HAL_UART_MspInit+0x148>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <HAL_UART_MspInit+0x148>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b2:	2320      	movs	r3, #32
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c2:	2307      	movs	r3, #7
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4813      	ldr	r0, [pc, #76]	@ (800121c <HAL_UART_MspInit+0x154>)
 80011ce:	f000 ff79 	bl	80020c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011e4:	2307      	movs	r3, #7
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	480c      	ldr	r0, [pc, #48]	@ (8001220 <HAL_UART_MspInit+0x158>)
 80011f0:	f000 ff68 	bl	80020c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2027      	movs	r0, #39	@ 0x27
 80011fa:	f000 fe9a 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011fe:	2027      	movs	r0, #39	@ 0x27
 8001200:	f000 feb3 	bl	8001f6a <HAL_NVIC_EnableIRQ>
}
 8001204:	bf00      	nop
 8001206:	3730      	adds	r7, #48	@ 0x30
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40004400 	.word	0x40004400
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000
 8001218:	40004800 	.word	0x40004800
 800121c:	40020800 	.word	0x40020800
 8001220:	40020400 	.word	0x40020400

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <NMI_Handler+0x4>

0800122c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <UsageFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 f8af 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <ADC_IRQHandler+0x10>)
 800128a:	f000 fa0d 	bl	80016a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000028 	.word	0x20000028

08001298 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <USART2_IRQHandler+0x10>)
 800129e:	f001 ff21 	bl	80030e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000070 	.word	0x20000070

080012ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <USART3_IRQHandler+0x10>)
 80012b2:	f001 ff17 	bl	80030e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000b8 	.word	0x200000b8

080012c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800131c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012e8:	f7ff ffea 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	@ (8001320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	@ (8001324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	@ (8001330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001312:	f002 fe45 	bl	8003fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff fa51 	bl	80007bc <main>
  bx  lr    
 800131a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001328:	08004048 	.word	0x08004048
  ldr r2, =_sbss
 800132c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001330:	20000110 	.word	0x20000110

08001334 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <CAN1_RX0_IRQHandler>
	...

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <HAL_Init+0x40>)
 8001342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001348:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <HAL_Init+0x40>)
 800134e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	@ (8001378 <HAL_Init+0x40>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 fddb 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fe1c 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fdf3 	bl	8001f86 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 fdbb 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	@ (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008
 8001400:	2000010c 	.word	0x2000010c

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	2000010c 	.word	0x2000010c

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008

08001464 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e033      	b.n	80014e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fdb8 	bl	8000ff8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014aa:	f023 0302 	bic.w	r3, r3, #2
 80014ae:	f043 0202 	orr.w	r2, r3, #2
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fb5a 	bl	8001b70 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	f023 0303 	bic.w	r3, r3, #3
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014d2:	e001      	b.n	80014d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_ADC_Start_IT+0x1a>
 8001502:	2302      	movs	r3, #2
 8001504:	e0bd      	b.n	8001682 <HAL_ADC_Start_IT+0x196>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b01      	cmp	r3, #1
 800151a:	d018      	beq.n	800154e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800152c:	4b58      	ldr	r3, [pc, #352]	@ (8001690 <HAL_ADC_Start_IT+0x1a4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a58      	ldr	r2, [pc, #352]	@ (8001694 <HAL_ADC_Start_IT+0x1a8>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9a      	lsrs	r2, r3, #18
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001540:	e002      	b.n	8001548 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3b01      	subs	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f9      	bne.n	8001542 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b01      	cmp	r3, #1
 800155a:	f040 8085 	bne.w	8001668 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001588:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800159c:	d106      	bne.n	80015ac <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	f023 0206 	bic.w	r2, r3, #6
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80015aa:	e002      	b.n	80015b2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ba:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <HAL_ADC_Start_IT+0x1ac>)
 80015bc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80015c6:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d12a      	bne.n	800163e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2b      	ldr	r2, [pc, #172]	@ (800169c <HAL_ADC_Start_IT+0x1b0>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d015      	beq.n	800161e <HAL_ADC_Start_IT+0x132>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a2a      	ldr	r2, [pc, #168]	@ (80016a0 <HAL_ADC_Start_IT+0x1b4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d105      	bne.n	8001608 <HAL_ADC_Start_IT+0x11c>
 80015fc:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_ADC_Start_IT+0x1ac>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00a      	beq.n	800161e <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a25      	ldr	r2, [pc, #148]	@ (80016a4 <HAL_ADC_Start_IT+0x1b8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d136      	bne.n	8001680 <HAL_ADC_Start_IT+0x194>
 8001612:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <HAL_ADC_Start_IT+0x1ac>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d130      	bne.n	8001680 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d129      	bne.n	8001680 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e020      	b.n	8001680 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a16      	ldr	r2, [pc, #88]	@ (800169c <HAL_ADC_Start_IT+0x1b0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d11b      	bne.n	8001680 <HAL_ADC_Start_IT+0x194>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d114      	bne.n	8001680 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	e00b      	b.n	8001680 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	f043 0210 	orr.w	r2, r3, #16
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000000 	.word	0x20000000
 8001694:	431bde83 	.word	0x431bde83
 8001698:	40012300 	.word	0x40012300
 800169c:	40012000 	.word	0x40012000
 80016a0:	40012100 	.word	0x40012100
 80016a4:	40012200 	.word	0x40012200

080016a8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d049      	beq.n	8001772 <HAL_ADC_IRQHandler+0xca>
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d046      	beq.n	8001772 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d12b      	bne.n	8001762 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d127      	bne.n	8001762 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800172a:	2b00      	cmp	r3, #0
 800172c:	d119      	bne.n	8001762 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0220 	bic.w	r2, r2, #32
 800173c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d105      	bne.n	8001762 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fa74 	bl	8000c50 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f06f 0212 	mvn.w	r2, #18
 8001770:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001780:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d057      	beq.n	8001838 <HAL_ADC_IRQHandler+0x190>
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d054      	beq.n	8001838 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d139      	bne.n	8001828 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d006      	beq.n	80017d0 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d12b      	bne.n	8001828 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d124      	bne.n	8001828 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d11d      	bne.n	8001828 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d119      	bne.n	8001828 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001802:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f043 0201 	orr.w	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fa9d 	bl	8001d68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f06f 020c 	mvn.w	r2, #12
 8001836:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001846:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d017      	beq.n	800187e <HAL_ADC_IRQHandler+0x1d6>
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d014      	beq.n	800187e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10d      	bne.n	800187e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f837 	bl	80018e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0201 	mvn.w	r2, #1
 800187c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800188c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d015      	beq.n	80018c0 <HAL_ADC_IRQHandler+0x218>
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d012      	beq.n	80018c0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f06f 0220 	mvn.w	r2, #32
 80018ae:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f820 	bl	80018f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f06f 0220 	mvn.w	r2, #32
 80018be:	601a      	str	r2, [r3, #0]
  }
}
 80018c0:	bf00      	nop
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1c>
 8001924:	2302      	movs	r3, #2
 8001926:	e113      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x244>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b09      	cmp	r3, #9
 8001936:	d925      	bls.n	8001984 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	3b1e      	subs	r3, #30
 800194e:	2207      	movs	r2, #7
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43da      	mvns	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	400a      	ands	r2, r1
 800195c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68d9      	ldr	r1, [r3, #12]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	4603      	mov	r3, r0
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4403      	add	r3, r0
 8001976:	3b1e      	subs	r3, #30
 8001978:	409a      	lsls	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	e022      	b.n	80019ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6919      	ldr	r1, [r3, #16]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	2207      	movs	r2, #7
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	400a      	ands	r2, r1
 80019a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6919      	ldr	r1, [r3, #16]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4403      	add	r3, r0
 80019c0:	409a      	lsls	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d824      	bhi.n	8001a1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	3b05      	subs	r3, #5
 80019e4:	221f      	movs	r2, #31
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4618      	mov	r0, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b05      	subs	r3, #5
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a1a:	e04c      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d824      	bhi.n	8001a6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b23      	subs	r3, #35	@ 0x23
 8001a36:	221f      	movs	r2, #31
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	400a      	ands	r2, r1
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3b23      	subs	r3, #35	@ 0x23
 8001a60:	fa00 f203 	lsl.w	r2, r0, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a6c:	e023      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3b41      	subs	r3, #65	@ 0x41
 8001a80:	221f      	movs	r2, #31
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b41      	subs	r3, #65	@ 0x41
 8001aaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ab6:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <HAL_ADC_ConfigChannel+0x250>)
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a28      	ldr	r2, [pc, #160]	@ (8001b60 <HAL_ADC_ConfigChannel+0x254>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d10f      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1d8>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d10b      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b60 <HAL_ADC_ConfigChannel+0x254>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12b      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x23a>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b64 <HAL_ADC_ConfigChannel+0x258>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d003      	beq.n	8001b00 <HAL_ADC_ConfigChannel+0x1f4>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b11      	cmp	r3, #17
 8001afe:	d122      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a11      	ldr	r2, [pc, #68]	@ (8001b64 <HAL_ADC_ConfigChannel+0x258>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d111      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_ADC_ConfigChannel+0x25c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a11      	ldr	r2, [pc, #68]	@ (8001b6c <HAL_ADC_ConfigChannel+0x260>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9a      	lsrs	r2, r3, #18
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b38:	e002      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f9      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40012300 	.word	0x40012300
 8001b60:	40012000 	.word	0x40012000
 8001b64:	10000012 	.word	0x10000012
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b78:	4b79      	ldr	r3, [pc, #484]	@ (8001d60 <ADC_Init+0x1f0>)
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	021a      	lsls	r2, r3, #8
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001bc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6899      	ldr	r1, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	4a58      	ldr	r2, [pc, #352]	@ (8001d64 <ADC_Init+0x1f4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d022      	beq.n	8001c4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6899      	ldr	r1, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	e00f      	b.n	8001c6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0202 	bic.w	r2, r2, #2
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7e1b      	ldrb	r3, [r3, #24]
 8001c88:	005a      	lsls	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001caa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6859      	ldr	r1, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	035a      	lsls	r2, r3, #13
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e007      	b.n	8001ce4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ce2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	051a      	lsls	r2, r3, #20
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6899      	ldr	r1, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d26:	025a      	lsls	r2, r3, #9
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	029a      	lsls	r2, r3, #10
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	40012300 	.word	0x40012300
 8001d64:	0f000001 	.word	0x0f000001

08001d68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	@ (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	@ (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	@ (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff29 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff3e 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff31 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff fa2a 	bl	8001404 <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d008      	beq.n	8001fd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2280      	movs	r2, #128	@ 0x80
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e052      	b.n	8002076 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0216 	bic.w	r2, r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d103      	bne.n	8002000 <HAL_DMA_Abort+0x62>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0208 	bic.w	r2, r2, #8
 800200e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002020:	e013      	b.n	800204a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002022:	f7ff f9ef 	bl	8001404 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b05      	cmp	r3, #5
 800202e:	d90c      	bls.n	800204a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e015      	b.n	8002076 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e4      	bne.n	8002022 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205c:	223f      	movs	r2, #63	@ 0x3f
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d004      	beq.n	800209c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2280      	movs	r2, #128	@ 0x80
 8002096:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e00c      	b.n	80020b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2205      	movs	r2, #5
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e165      	b.n	80023ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8154 	bne.w	80023a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002112:	2b02      	cmp	r3, #2
 8002114:	d130      	bne.n	8002178 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80ae 	beq.w	80023a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b5d      	ldr	r3, [pc, #372]	@ (80023c4 <HAL_GPIO_Init+0x300>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a5c      	ldr	r2, [pc, #368]	@ (80023c4 <HAL_GPIO_Init+0x300>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b5a      	ldr	r3, [pc, #360]	@ (80023c4 <HAL_GPIO_Init+0x300>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a58      	ldr	r2, [pc, #352]	@ (80023c8 <HAL_GPIO_Init+0x304>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4f      	ldr	r2, [pc, #316]	@ (80023cc <HAL_GPIO_Init+0x308>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d025      	beq.n	80022de <HAL_GPIO_Init+0x21a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a4e      	ldr	r2, [pc, #312]	@ (80023d0 <HAL_GPIO_Init+0x30c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01f      	beq.n	80022da <HAL_GPIO_Init+0x216>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a4d      	ldr	r2, [pc, #308]	@ (80023d4 <HAL_GPIO_Init+0x310>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x212>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4c      	ldr	r2, [pc, #304]	@ (80023d8 <HAL_GPIO_Init+0x314>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x20e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4b      	ldr	r2, [pc, #300]	@ (80023dc <HAL_GPIO_Init+0x318>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x20a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4a      	ldr	r2, [pc, #296]	@ (80023e0 <HAL_GPIO_Init+0x31c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x206>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a49      	ldr	r2, [pc, #292]	@ (80023e4 <HAL_GPIO_Init+0x320>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x202>
 80022c2:	2306      	movs	r3, #6
 80022c4:	e00c      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022c6:	2307      	movs	r3, #7
 80022c8:	e00a      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022ca:	2305      	movs	r3, #5
 80022cc:	e008      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022ce:	2304      	movs	r3, #4
 80022d0:	e006      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022d2:	2303      	movs	r3, #3
 80022d4:	e004      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_GPIO_Init+0x21c>
 80022de:	2300      	movs	r3, #0
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	f002 0203 	and.w	r2, r2, #3
 80022e6:	0092      	lsls	r2, r2, #2
 80022e8:	4093      	lsls	r3, r2
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f0:	4935      	ldr	r1, [pc, #212]	@ (80023c8 <HAL_GPIO_Init+0x304>)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022fe:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <HAL_GPIO_Init+0x324>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002322:	4a31      	ldr	r2, [pc, #196]	@ (80023e8 <HAL_GPIO_Init+0x324>)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002328:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <HAL_GPIO_Init+0x324>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800234c:	4a26      	ldr	r2, [pc, #152]	@ (80023e8 <HAL_GPIO_Init+0x324>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002352:	4b25      	ldr	r3, [pc, #148]	@ (80023e8 <HAL_GPIO_Init+0x324>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002376:	4a1c      	ldr	r2, [pc, #112]	@ (80023e8 <HAL_GPIO_Init+0x324>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <HAL_GPIO_Init+0x324>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a0:	4a11      	ldr	r2, [pc, #68]	@ (80023e8 <HAL_GPIO_Init+0x324>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3301      	adds	r3, #1
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	2b0f      	cmp	r3, #15
 80023b0:	f67f ae96 	bls.w	80020e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	3724      	adds	r7, #36	@ 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40013800 	.word	0x40013800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40020400 	.word	0x40020400
 80023d4:	40020800 	.word	0x40020800
 80023d8:	40020c00 	.word	0x40020c00
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40021400 	.word	0x40021400
 80023e4:	40021800 	.word	0x40021800
 80023e8:	40013c00 	.word	0x40013c00

080023ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
 80023f8:	4613      	mov	r3, r2
 80023fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023fc:	787b      	ldrb	r3, [r7, #1]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002408:	e003      	b.n	8002412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	041a      	lsls	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0cc      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b68      	ldr	r3, [pc, #416]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d90c      	bls.n	800245c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b65      	ldr	r3, [pc, #404]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800247e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a52      	ldr	r2, [pc, #328]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d044      	beq.n	8002540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d119      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d003      	beq.n	80024de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e06f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e067      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4934      	ldr	r1, [pc, #208]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002510:	f7fe ff78 	bl	8001404 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe ff74 	bl	8001404 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e04f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b2b      	ldr	r3, [pc, #172]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 020c 	and.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	429a      	cmp	r2, r3
 800253e:	d1eb      	bne.n	8002518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d20c      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b22      	ldr	r3, [pc, #136]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f855 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fed8 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00
 80025dc:	40023800 	.word	0x40023800
 80025e0:	08004020 	.word	0x08004020
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b03      	ldr	r3, [pc, #12]	@ (8002600 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff0 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0a9b      	lsrs	r3, r3, #10
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	@ (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	08004030 	.word	0x08004030

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffdc 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0b5b      	lsrs	r3, r3, #13
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	@ (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	08004030 	.word	0x08004030

08002654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002658:	b0a6      	sub	sp, #152	@ 0x98
 800265a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800267a:	4bc8      	ldr	r3, [pc, #800]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b0c      	cmp	r3, #12
 8002684:	f200 817e 	bhi.w	8002984 <HAL_RCC_GetSysClockFreq+0x330>
 8002688:	a201      	add	r2, pc, #4	@ (adr r2, 8002690 <HAL_RCC_GetSysClockFreq+0x3c>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026c5 	.word	0x080026c5
 8002694:	08002985 	.word	0x08002985
 8002698:	08002985 	.word	0x08002985
 800269c:	08002985 	.word	0x08002985
 80026a0:	080026cd 	.word	0x080026cd
 80026a4:	08002985 	.word	0x08002985
 80026a8:	08002985 	.word	0x08002985
 80026ac:	08002985 	.word	0x08002985
 80026b0:	080026d5 	.word	0x080026d5
 80026b4:	08002985 	.word	0x08002985
 80026b8:	08002985 	.word	0x08002985
 80026bc:	08002985 	.word	0x08002985
 80026c0:	0800283f 	.word	0x0800283f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4bb6      	ldr	r3, [pc, #728]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80026c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026ca:	e15f      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026cc:	4bb5      	ldr	r3, [pc, #724]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x350>)
 80026ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026d2:	e15b      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d4:	4bb1      	ldr	r3, [pc, #708]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026e0:	4bae      	ldr	r3, [pc, #696]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d031      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ec:	4bab      	ldr	r3, [pc, #684]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	2200      	movs	r2, #0
 80026f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002700:	2300      	movs	r3, #0
 8002702:	667b      	str	r3, [r7, #100]	@ 0x64
 8002704:	4ba7      	ldr	r3, [pc, #668]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002706:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800270a:	462a      	mov	r2, r5
 800270c:	fb03 f202 	mul.w	r2, r3, r2
 8002710:	2300      	movs	r3, #0
 8002712:	4621      	mov	r1, r4
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	4aa2      	ldr	r2, [pc, #648]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800271c:	4621      	mov	r1, r4
 800271e:	fba1 1202 	umull	r1, r2, r1, r2
 8002722:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002724:	460a      	mov	r2, r1
 8002726:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002728:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800272a:	4413      	add	r3, r2
 800272c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002732:	2200      	movs	r2, #0
 8002734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002736:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002738:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800273c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002740:	f7fd fd68 	bl	8000214 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800274e:	e064      	b.n	800281a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002750:	4b92      	ldr	r3, [pc, #584]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	2200      	movs	r2, #0
 8002758:	653b      	str	r3, [r7, #80]	@ 0x50
 800275a:	657a      	str	r2, [r7, #84]	@ 0x54
 800275c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800275e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002764:	2300      	movs	r3, #0
 8002766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002768:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800276c:	4622      	mov	r2, r4
 800276e:	462b      	mov	r3, r5
 8002770:	f04f 0000 	mov.w	r0, #0
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	0159      	lsls	r1, r3, #5
 800277a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277e:	0150      	lsls	r0, r2, #5
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4621      	mov	r1, r4
 8002786:	1a51      	subs	r1, r2, r1
 8002788:	6139      	str	r1, [r7, #16]
 800278a:	4629      	mov	r1, r5
 800278c:	eb63 0301 	sbc.w	r3, r3, r1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800279e:	4659      	mov	r1, fp
 80027a0:	018b      	lsls	r3, r1, #6
 80027a2:	4651      	mov	r1, sl
 80027a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a8:	4651      	mov	r1, sl
 80027aa:	018a      	lsls	r2, r1, #6
 80027ac:	4651      	mov	r1, sl
 80027ae:	ebb2 0801 	subs.w	r8, r2, r1
 80027b2:	4659      	mov	r1, fp
 80027b4:	eb63 0901 	sbc.w	r9, r3, r1
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027cc:	4690      	mov	r8, r2
 80027ce:	4699      	mov	r9, r3
 80027d0:	4623      	mov	r3, r4
 80027d2:	eb18 0303 	adds.w	r3, r8, r3
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	462b      	mov	r3, r5
 80027da:	eb49 0303 	adc.w	r3, r9, r3
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ec:	4629      	mov	r1, r5
 80027ee:	028b      	lsls	r3, r1, #10
 80027f0:	4621      	mov	r1, r4
 80027f2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027f6:	4621      	mov	r1, r4
 80027f8:	028a      	lsls	r2, r1, #10
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002802:	2200      	movs	r2, #0
 8002804:	643b      	str	r3, [r7, #64]	@ 0x40
 8002806:	647a      	str	r2, [r7, #68]	@ 0x44
 8002808:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800280c:	f7fd fd02 	bl	8000214 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4613      	mov	r3, r2
 8002816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800281a:	4b60      	ldr	r3, [pc, #384]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	3301      	adds	r3, #1
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800282c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002830:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800283c:	e0a6      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800283e:	4b57      	ldr	r3, [pc, #348]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284a:	4b54      	ldr	r3, [pc, #336]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d02a      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002856:	4b51      	ldr	r3, [pc, #324]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	2200      	movs	r2, #0
 800285e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002860:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002864:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002868:	2100      	movs	r1, #0
 800286a:	4b4e      	ldr	r3, [pc, #312]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800286c:	fb03 f201 	mul.w	r2, r3, r1
 8002870:	2300      	movs	r3, #0
 8002872:	fb00 f303 	mul.w	r3, r0, r3
 8002876:	4413      	add	r3, r2
 8002878:	4a4a      	ldr	r2, [pc, #296]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800287a:	fba0 1202 	umull	r1, r2, r0, r2
 800287e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002880:	460a      	mov	r2, r1
 8002882:	673a      	str	r2, [r7, #112]	@ 0x70
 8002884:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002886:	4413      	add	r3, r2
 8002888:	677b      	str	r3, [r7, #116]	@ 0x74
 800288a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800288e:	2200      	movs	r2, #0
 8002890:	633b      	str	r3, [r7, #48]	@ 0x30
 8002892:	637a      	str	r2, [r7, #52]	@ 0x34
 8002894:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002898:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800289c:	f7fd fcba 	bl	8000214 <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4613      	mov	r3, r2
 80028a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028aa:	e05b      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ac:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	2200      	movs	r2, #0
 80028b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028be:	623b      	str	r3, [r7, #32]
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028c8:	4642      	mov	r2, r8
 80028ca:	464b      	mov	r3, r9
 80028cc:	f04f 0000 	mov.w	r0, #0
 80028d0:	f04f 0100 	mov.w	r1, #0
 80028d4:	0159      	lsls	r1, r3, #5
 80028d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028da:	0150      	lsls	r0, r2, #5
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4641      	mov	r1, r8
 80028e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80028e6:	4649      	mov	r1, r9
 80028e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f04f 0300 	mov.w	r3, #0
 80028f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002900:	ebb2 040a 	subs.w	r4, r2, sl
 8002904:	eb63 050b 	sbc.w	r5, r3, fp
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	00eb      	lsls	r3, r5, #3
 8002912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002916:	00e2      	lsls	r2, r4, #3
 8002918:	4614      	mov	r4, r2
 800291a:	461d      	mov	r5, r3
 800291c:	4643      	mov	r3, r8
 800291e:	18e3      	adds	r3, r4, r3
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	464b      	mov	r3, r9
 8002924:	eb45 0303 	adc.w	r3, r5, r3
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002936:	4629      	mov	r1, r5
 8002938:	028b      	lsls	r3, r1, #10
 800293a:	4621      	mov	r1, r4
 800293c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002940:	4621      	mov	r1, r4
 8002942:	028a      	lsls	r2, r1, #10
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800294c:	2200      	movs	r2, #0
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	61fa      	str	r2, [r7, #28]
 8002952:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002956:	f7fd fc5d 	bl	8000214 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4613      	mov	r3, r2
 8002960:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002964:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_RCC_GetSysClockFreq+0x348>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0f1b      	lsrs	r3, r3, #28
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002976:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002982:	e003      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002986:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800298a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800298c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002990:	4618      	mov	r0, r3
 8002992:	3798      	adds	r7, #152	@ 0x98
 8002994:	46bd      	mov	sp, r7
 8002996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	00f42400 	.word	0x00f42400
 80029a4:	017d7840 	.word	0x017d7840

080029a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e28d      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8083 	beq.w	8002ace <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029c8:	4b94      	ldr	r3, [pc, #592]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d019      	beq.n	8002a08 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029d4:	4b91      	ldr	r3, [pc, #580]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030c 	and.w	r3, r3, #12
        || \
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029e0:	4b8e      	ldr	r3, [pc, #568]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ec:	d00c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b8b      	ldr	r3, [pc, #556]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d112      	bne.n	8002a20 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	4b88      	ldr	r3, [pc, #544]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	4b84      	ldr	r3, [pc, #528]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05b      	beq.n	8002acc <HAL_RCC_OscConfig+0x124>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d157      	bne.n	8002acc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e25a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x90>
 8002a2a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e01d      	b.n	8002a74 <HAL_RCC_OscConfig+0xcc>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0xb4>
 8002a42:	4b76      	ldr	r3, [pc, #472]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a75      	ldr	r2, [pc, #468]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b73      	ldr	r3, [pc, #460]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a72      	ldr	r2, [pc, #456]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0xcc>
 8002a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6e      	ldr	r2, [pc, #440]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b6c      	ldr	r3, [pc, #432]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a6b      	ldr	r2, [pc, #428]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fcc2 	bl	8001404 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe fcbe 	bl	8001404 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	@ 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e21f      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b61      	ldr	r3, [pc, #388]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0xdc>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fcae 	bl	8001404 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe fcaa 	bl	8001404 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	@ 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e20b      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	4b57      	ldr	r3, [pc, #348]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x104>
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d06f      	beq.n	8002bba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ada:	4b50      	ldr	r3, [pc, #320]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d017      	beq.n	8002b16 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
        || \
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d105      	bne.n	8002afe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002af2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b47      	ldr	r3, [pc, #284]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d11c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b0a:	4b44      	ldr	r3, [pc, #272]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d116      	bne.n	8002b44 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b16:	4b41      	ldr	r3, [pc, #260]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_RCC_OscConfig+0x186>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d001      	beq.n	8002b2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e1d3      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4937      	ldr	r1, [pc, #220]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b42:	e03a      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d020      	beq.n	8002b8e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b4c:	4b34      	ldr	r3, [pc, #208]	@ (8002c20 <HAL_RCC_OscConfig+0x278>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe fc57 	bl	8001404 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fc53 	bl	8001404 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e1b4      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0f0      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b28      	ldr	r3, [pc, #160]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4925      	ldr	r1, [pc, #148]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]
 8002b8c:	e015      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <HAL_RCC_OscConfig+0x278>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fc36 	bl	8001404 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9c:	f7fe fc32 	bl	8001404 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e193      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d036      	beq.n	8002c34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d016      	beq.n	8002bfc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <HAL_RCC_OscConfig+0x27c>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fc16 	bl	8001404 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bdc:	f7fe fc12 	bl	8001404 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e173      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0x234>
 8002bfa:	e01b      	b.n	8002c34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_RCC_OscConfig+0x27c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7fe fbff 	bl	8001404 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	e00e      	b.n	8002c28 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fbfb 	bl	8001404 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d907      	bls.n	8002c28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e15c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	42470000 	.word	0x42470000
 8002c24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c28:	4b8a      	ldr	r3, [pc, #552]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ea      	bne.n	8002c0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8097 	beq.w	8002d70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c46:	4b83      	ldr	r3, [pc, #524]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	4b7f      	ldr	r3, [pc, #508]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c62:	4b7c      	ldr	r3, [pc, #496]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b79      	ldr	r3, [pc, #484]	@ (8002e58 <HAL_RCC_OscConfig+0x4b0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d118      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4b76      	ldr	r3, [pc, #472]	@ (8002e58 <HAL_RCC_OscConfig+0x4b0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a75      	ldr	r2, [pc, #468]	@ (8002e58 <HAL_RCC_OscConfig+0x4b0>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe fbbb 	bl	8001404 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fe fbb7 	bl	8001404 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e118      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e58 <HAL_RCC_OscConfig+0x4b0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x31e>
 8002cb8:	4b66      	ldr	r3, [pc, #408]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbc:	4a65      	ldr	r2, [pc, #404]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc4:	e01c      	b.n	8002d00 <HAL_RCC_OscConfig+0x358>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b05      	cmp	r3, #5
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x340>
 8002cce:	4b61      	ldr	r3, [pc, #388]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	4a60      	ldr	r2, [pc, #384]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	f043 0304 	orr.w	r3, r3, #4
 8002cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cda:	4b5e      	ldr	r3, [pc, #376]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cde:	4a5d      	ldr	r2, [pc, #372]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0x358>
 8002ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a59      	ldr	r2, [pc, #356]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf4:	4b57      	ldr	r3, [pc, #348]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	4a56      	ldr	r2, [pc, #344]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002cfa:	f023 0304 	bic.w	r3, r3, #4
 8002cfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fe fb7c 	bl	8001404 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	e00a      	b.n	8002d26 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fe fb78 	bl	8001404 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e0d7      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	4b4b      	ldr	r3, [pc, #300]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ee      	beq.n	8002d10 <HAL_RCC_OscConfig+0x368>
 8002d32:	e014      	b.n	8002d5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe fb66 	bl	8001404 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3c:	f7fe fb62 	bl	8001404 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e0c1      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d52:	4b40      	ldr	r3, [pc, #256]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1ee      	bne.n	8002d3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d5e:	7dfb      	ldrb	r3, [r7, #23]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b3b      	ldr	r3, [pc, #236]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	4a3a      	ldr	r2, [pc, #232]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80ad 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d7a:	4b36      	ldr	r3, [pc, #216]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d060      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d145      	bne.n	8002e1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b33      	ldr	r3, [pc, #204]	@ (8002e5c <HAL_RCC_OscConfig+0x4b4>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fb36 	bl	8001404 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fb32 	bl	8001404 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e093      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	4b29      	ldr	r3, [pc, #164]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	019b      	lsls	r3, r3, #6
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	041b      	lsls	r3, r3, #16
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	061b      	lsls	r3, r3, #24
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de4:	071b      	lsls	r3, r3, #28
 8002de6:	491b      	ldr	r1, [pc, #108]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dec:	4b1b      	ldr	r3, [pc, #108]	@ (8002e5c <HAL_RCC_OscConfig+0x4b4>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fb07 	bl	8001404 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe fb03 	bl	8001404 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e064      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x452>
 8002e18:	e05c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <HAL_RCC_OscConfig+0x4b4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe faf0 	bl	8001404 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe faec 	bl	8001404 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04d      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x480>
 8002e46:	e045      	b.n	8002ed4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e040      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <HAL_RCC_OscConfig+0x538>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d030      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d129      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d122      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e90:	4013      	ands	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d119      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	085b      	lsrs	r3, r3, #1
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d10f      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e042      	b.n	8002f7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe f8dc 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	@ 0x24
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fdbd 	bl	8003aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	@ 0x28
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d175      	bne.n	8003090 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_UART_Transmit+0x2c>
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e06e      	b.n	8003092 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2221      	movs	r2, #33	@ 0x21
 8002fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fc2:	f7fe fa1f 	bl	8001404 <HAL_GetTick>
 8002fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fdc:	d108      	bne.n	8002ff0 <HAL_UART_Transmit+0x6c>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d104      	bne.n	8002ff0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e003      	b.n	8002ff8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ff8:	e02e      	b.n	8003058 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	2180      	movs	r1, #128	@ 0x80
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fb1f 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e03a      	b.n	8003092 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003030:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	3302      	adds	r3, #2
 8003036:	61bb      	str	r3, [r7, #24]
 8003038:	e007      	b.n	800304a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	3301      	adds	r3, #1
 8003048:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1cb      	bne.n	8002ffa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	2140      	movs	r1, #64	@ 0x40
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 faeb 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e006      	b.n	8003092 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d112      	bne.n	80030da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_UART_Receive_IT+0x26>
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e00b      	b.n	80030dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 fb12 	bl	80036fa <UART_Start_Receive_IT>
 80030d6:	4603      	mov	r3, r0
 80030d8:	e000      	b.n	80030dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030da:	2302      	movs	r3, #2
  }
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0ba      	sub	sp, #232	@ 0xe8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_UART_IRQHandler+0x66>
 8003136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fbf2 	bl	800392c <UART_Receive_IT>
      return;
 8003148:	e25b      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800314a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80de 	beq.w	8003310 <HAL_UART_IRQHandler+0x22c>
 8003154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003164:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80d1 	beq.w	8003310 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xae>
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	f043 0201 	orr.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_UART_IRQHandler+0xd2>
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_UART_IRQHandler+0xf6>
 80031c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d011      	beq.n	800320a <HAL_UART_IRQHandler+0x126>
 80031e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	f043 0208 	orr.w	r2, r3, #8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 81f2 	beq.w	80035f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_UART_IRQHandler+0x14e>
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb7d 	bl	800392c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b40      	cmp	r3, #64	@ 0x40
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <HAL_UART_IRQHandler+0x17a>
 8003256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04f      	beq.n	80032fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fa85 	bl	800376e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326e:	2b40      	cmp	r3, #64	@ 0x40
 8003270:	d141      	bne.n	80032f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800328c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800329e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1d9      	bne.n	8003272 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d013      	beq.n	80032ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ca:	4a7e      	ldr	r2, [pc, #504]	@ (80034c4 <HAL_UART_IRQHandler+0x3e0>)
 80032cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fed3 	bl	800207e <HAL_DMA_Abort_IT>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032e8:	4610      	mov	r0, r2
 80032ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e00e      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f994 	bl	800361c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	e00a      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f990 	bl	800361c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e006      	b.n	800330c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f98c 	bl	800361c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800330a:	e175      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	bf00      	nop
    return;
 800330e:	e173      	b.n	80035f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 814f 	bne.w	80035b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8148 	beq.w	80035b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8141 	beq.w	80035b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003336:	2300      	movs	r3, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	f040 80b6 	bne.w	80034c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003368:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8145 	beq.w	80035fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800337a:	429a      	cmp	r2, r3
 800337c:	f080 813e 	bcs.w	80035fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003386:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003392:	f000 8088 	beq.w	80034a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1d9      	bne.n	8003396 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003406:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800340a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800340e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003418:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e1      	bne.n	80033e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3314      	adds	r3, #20
 8003424:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800342e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003430:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003434:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003442:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003444:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003448:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003476:	f023 0310 	bic.w	r3, r3, #16
 800347a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003488:	65ba      	str	r2, [r7, #88]	@ 0x58
 800348a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800348e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe fd7c 	bl	8001f9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8b7 	bl	8003630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034c2:	e09b      	b.n	80035fc <HAL_UART_IRQHandler+0x518>
 80034c4:	08003835 	.word	0x08003835
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 808e 	beq.w	8003600 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8089 	beq.w	8003600 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003500:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003504:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003512:	647a      	str	r2, [r7, #68]	@ 0x44
 8003514:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e3      	bne.n	80034ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	623b      	str	r3, [r7, #32]
   return(result);
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800354a:	633a      	str	r2, [r7, #48]	@ 0x30
 800354c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e3      	bne.n	8003526 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	60fb      	str	r3, [r7, #12]
   return(result);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0310 	bic.w	r3, r3, #16
 8003582:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003590:	61fa      	str	r2, [r7, #28]
 8003592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	69b9      	ldr	r1, [r7, #24]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	e841 2300 	strex	r3, r2, [r1]
 800359c:	617b      	str	r3, [r7, #20]
   return(result);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e3      	bne.n	800356c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f83d 	bl	8003630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035b6:	e023      	b.n	8003600 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_UART_IRQHandler+0x4f4>
 80035c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f943 	bl	800385c <UART_Transmit_IT>
    return;
 80035d6:	e014      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <HAL_UART_IRQHandler+0x51e>
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f983 	bl	80038fc <UART_EndTransmit_IT>
    return;
 80035f6:	e004      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
    return;
 80035f8:	bf00      	nop
 80035fa:	e002      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
      return;
 80035fc:	bf00      	nop
 80035fe:	e000      	b.n	8003602 <HAL_UART_IRQHandler+0x51e>
      return;
 8003600:	bf00      	nop
  }
}
 8003602:	37e8      	adds	r7, #232	@ 0xe8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003658:	e03b      	b.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d037      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fd fecf 	bl	8001404 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <UART_WaitOnFlagUntilTimeout+0x30>
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e03a      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d023      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b80      	cmp	r3, #128	@ 0x80
 800368e:	d020      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	d01d      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d116      	bne.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f857 	bl	800376e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2208      	movs	r2, #8
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e00f      	b.n	80036f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	bf0c      	ite	eq
 80036e2:	2301      	moveq	r3, #1
 80036e4:	2300      	movne	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	79fb      	ldrb	r3, [r7, #7]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d0b4      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	4613      	mov	r3, r2
 8003706:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2222      	movs	r2, #34	@ 0x22
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800373e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0220 	orr.w	r2, r2, #32
 800375e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800376e:	b480      	push	{r7}
 8003770:	b095      	sub	sp, #84	@ 0x54
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800378c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003796:	643a      	str	r2, [r7, #64]	@ 0x40
 8003798:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800379c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3314      	adds	r3, #20
 80037b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3314      	adds	r3, #20
 80037c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e5      	bne.n	80037aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d119      	bne.n	800381a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 0310 	bic.w	r3, r3, #16
 80037fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003806:	61ba      	str	r2, [r7, #24]
 8003808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	613b      	str	r3, [r7, #16]
   return(result);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e5      	bne.n	80037e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003828:	bf00      	nop
 800382a:	3754      	adds	r7, #84	@ 0x54
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fee4 	bl	800361c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b21      	cmp	r3, #33	@ 0x21
 800386e:	d13e      	bne.n	80038ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003878:	d114      	bne.n	80038a4 <UART_Transmit_IT+0x48>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d110      	bne.n	80038a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003896:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]
 80038a2:	e008      	b.n	80038b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6211      	str	r1, [r2, #32]
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29b      	uxth	r3, r3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4619      	mov	r1, r3
 80038c4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
  }
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003912:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fe73 	bl	8003608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	@ 0x30
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b22      	cmp	r3, #34	@ 0x22
 800393e:	f040 80ae 	bne.w	8003a9e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	d117      	bne.n	800397c <UART_Receive_IT+0x50>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d113      	bne.n	800397c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003954:	2300      	movs	r3, #0
 8003956:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	b29b      	uxth	r3, r3
 8003966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396a:	b29a      	uxth	r2, r3
 800396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	1c9a      	adds	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	629a      	str	r2, [r3, #40]	@ 0x28
 800397a:	e026      	b.n	80039ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398e:	d007      	beq.n	80039a0 <UART_Receive_IT+0x74>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <UART_Receive_IT+0x82>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e008      	b.n	80039c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4619      	mov	r1, r3
 80039d8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d15d      	bne.n	8003a9a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0220 	bic.w	r2, r2, #32
 80039ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d135      	bne.n	8003a90 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f023 0310 	bic.w	r3, r3, #16
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4a:	623a      	str	r2, [r7, #32]
 8003a4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	69f9      	ldr	r1, [r7, #28]
 8003a50:	6a3a      	ldr	r2, [r7, #32]
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d10a      	bne.n	8003a82 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff fdd1 	bl	8003630 <HAL_UARTEx_RxEventCallback>
 8003a8e:	e002      	b.n	8003a96 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fd fa1d 	bl	8000ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e002      	b.n	8003aa0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e000      	b.n	8003aa0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a9e:	2302      	movs	r3, #2
  }
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3730      	adds	r7, #48	@ 0x30
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aac:	b0c0      	sub	sp, #256	@ 0x100
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	68d9      	ldr	r1, [r3, #12]
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	ea40 0301 	orr.w	r3, r0, r1
 8003ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b00:	f021 010c 	bic.w	r1, r1, #12
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b22:	6999      	ldr	r1, [r3, #24]
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	ea40 0301 	orr.w	r3, r0, r1
 8003b2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4b8f      	ldr	r3, [pc, #572]	@ (8003d74 <UART_SetConfig+0x2cc>)
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d005      	beq.n	8003b48 <UART_SetConfig+0xa0>
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b8d      	ldr	r3, [pc, #564]	@ (8003d78 <UART_SetConfig+0x2d0>)
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d104      	bne.n	8003b52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7fe fd70 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8003b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b50:	e003      	b.n	8003b5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b52:	f7fe fd57 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8003b56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b64:	f040 810c 	bne.w	8003d80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	1891      	adds	r1, r2, r2
 8003b80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b82:	415b      	adcs	r3, r3
 8003b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	eb12 0801 	adds.w	r8, r2, r1
 8003b90:	4629      	mov	r1, r5
 8003b92:	eb43 0901 	adc.w	r9, r3, r1
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003baa:	4690      	mov	r8, r2
 8003bac:	4699      	mov	r9, r3
 8003bae:	4623      	mov	r3, r4
 8003bb0:	eb18 0303 	adds.w	r3, r8, r3
 8003bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bb8:	462b      	mov	r3, r5
 8003bba:	eb49 0303 	adc.w	r3, r9, r3
 8003bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	18db      	adds	r3, r3, r3
 8003bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bdc:	4613      	mov	r3, r2
 8003bde:	eb42 0303 	adc.w	r3, r2, r3
 8003be2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003be4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003be8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bec:	f7fc fb12 	bl	8000214 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4b61      	ldr	r3, [pc, #388]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	011c      	lsls	r4, r3, #4
 8003bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c20:	4641      	mov	r1, r8
 8003c22:	eb12 0a01 	adds.w	sl, r2, r1
 8003c26:	4649      	mov	r1, r9
 8003c28:	eb43 0b01 	adc.w	fp, r3, r1
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c40:	4692      	mov	sl, r2
 8003c42:	469b      	mov	fp, r3
 8003c44:	4643      	mov	r3, r8
 8003c46:	eb1a 0303 	adds.w	r3, sl, r3
 8003c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c4e:	464b      	mov	r3, r9
 8003c50:	eb4b 0303 	adc.w	r3, fp, r3
 8003c54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	18db      	adds	r3, r3, r3
 8003c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c72:	4613      	mov	r3, r2
 8003c74:	eb42 0303 	adc.w	r3, r2, r3
 8003c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c82:	f7fc fac7 	bl	8000214 <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2264      	movs	r2, #100	@ 0x64
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	1acb      	subs	r3, r1, r3
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ca2:	4b36      	ldr	r3, [pc, #216]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cb0:	441c      	add	r4, r3
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	1851      	adds	r1, r2, r1
 8003cd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cda:	4649      	mov	r1, r9
 8003cdc:	414b      	adcs	r3, r1
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cec:	4659      	mov	r1, fp
 8003cee:	00cb      	lsls	r3, r1, #3
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	00ca      	lsls	r2, r1, #3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4642      	mov	r2, r8
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d08:	464b      	mov	r3, r9
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d28:	460b      	mov	r3, r1
 8003d2a:	18db      	adds	r3, r3, r3
 8003d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d2e:	4613      	mov	r3, r2
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d3e:	f7fc fa69 	bl	8000214 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003d48:	fba3 1302 	umull	r1, r3, r3, r2
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	2164      	movs	r1, #100	@ 0x64
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	3332      	adds	r3, #50	@ 0x32
 8003d5a:	4a08      	ldr	r2, [pc, #32]	@ (8003d7c <UART_SetConfig+0x2d4>)
 8003d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	f003 0207 	and.w	r2, r3, #7
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4422      	add	r2, r4
 8003d6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d70:	e106      	b.n	8003f80 <UART_SetConfig+0x4d8>
 8003d72:	bf00      	nop
 8003d74:	40011000 	.word	0x40011000
 8003d78:	40011400 	.word	0x40011400
 8003d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d92:	4642      	mov	r2, r8
 8003d94:	464b      	mov	r3, r9
 8003d96:	1891      	adds	r1, r2, r2
 8003d98:	6239      	str	r1, [r7, #32]
 8003d9a:	415b      	adcs	r3, r3
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003da2:	4641      	mov	r1, r8
 8003da4:	1854      	adds	r4, r2, r1
 8003da6:	4649      	mov	r1, r9
 8003da8:	eb43 0501 	adc.w	r5, r3, r1
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	00eb      	lsls	r3, r5, #3
 8003db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dba:	00e2      	lsls	r2, r4, #3
 8003dbc:	4614      	mov	r4, r2
 8003dbe:	461d      	mov	r5, r3
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	18e3      	adds	r3, r4, r3
 8003dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dc8:	464b      	mov	r3, r9
 8003dca:	eb45 0303 	adc.w	r3, r5, r3
 8003dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dee:	4629      	mov	r1, r5
 8003df0:	008b      	lsls	r3, r1, #2
 8003df2:	4621      	mov	r1, r4
 8003df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003df8:	4621      	mov	r1, r4
 8003dfa:	008a      	lsls	r2, r1, #2
 8003dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e00:	f7fc fa08 	bl	8000214 <__aeabi_uldivmod>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4b60      	ldr	r3, [pc, #384]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	011c      	lsls	r4, r3, #4
 8003e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e24:	4642      	mov	r2, r8
 8003e26:	464b      	mov	r3, r9
 8003e28:	1891      	adds	r1, r2, r2
 8003e2a:	61b9      	str	r1, [r7, #24]
 8003e2c:	415b      	adcs	r3, r3
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e34:	4641      	mov	r1, r8
 8003e36:	1851      	adds	r1, r2, r1
 8003e38:	6139      	str	r1, [r7, #16]
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	414b      	adcs	r3, r1
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e4c:	4659      	mov	r1, fp
 8003e4e:	00cb      	lsls	r3, r1, #3
 8003e50:	4651      	mov	r1, sl
 8003e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e56:	4651      	mov	r1, sl
 8003e58:	00ca      	lsls	r2, r1, #3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4642      	mov	r2, r8
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e68:	464b      	mov	r3, r9
 8003e6a:	460a      	mov	r2, r1
 8003e6c:	eb42 0303 	adc.w	r3, r2, r3
 8003e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	008b      	lsls	r3, r1, #2
 8003e90:	4641      	mov	r1, r8
 8003e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e96:	4641      	mov	r1, r8
 8003e98:	008a      	lsls	r2, r1, #2
 8003e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e9e:	f7fc f9b9 	bl	8000214 <__aeabi_uldivmod>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4b38      	ldr	r3, [pc, #224]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2264      	movs	r2, #100	@ 0x64
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	1acb      	subs	r3, r1, r3
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	3332      	adds	r3, #50	@ 0x32
 8003ebc:	4a33      	ldr	r2, [pc, #204]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ec8:	441c      	add	r4, r3
 8003eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ece:	2200      	movs	r2, #0
 8003ed0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ed2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ed4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee8:	4641      	mov	r1, r8
 8003eea:	1851      	adds	r1, r2, r1
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	4649      	mov	r1, r9
 8003ef0:	414b      	adcs	r3, r1
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f00:	4659      	mov	r1, fp
 8003f02:	00cb      	lsls	r3, r1, #3
 8003f04:	4651      	mov	r1, sl
 8003f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	00ca      	lsls	r2, r1, #3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	4642      	mov	r2, r8
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	460a      	mov	r2, r1
 8003f1e:	eb42 0303 	adc.w	r3, r2, r3
 8003f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	008b      	lsls	r3, r1, #2
 8003f40:	4641      	mov	r1, r8
 8003f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f46:	4641      	mov	r1, r8
 8003f48:	008a      	lsls	r2, r1, #2
 8003f4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f4e:	f7fc f961 	bl	8000214 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003f58:	fba3 1302 	umull	r1, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	2164      	movs	r1, #100	@ 0x64
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	3332      	adds	r3, #50	@ 0x32
 8003f6a:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <UART_SetConfig+0x4e4>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f003 020f 	and.w	r2, r3, #15
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4422      	add	r2, r4
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f86:	46bd      	mov	sp, r7
 8003f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8c:	51eb851f 	.word	0x51eb851f

08003f90 <memset>:
 8003f90:	4402      	add	r2, r0
 8003f92:	4603      	mov	r3, r0
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d100      	bne.n	8003f9a <memset+0xa>
 8003f98:	4770      	bx	lr
 8003f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f9e:	e7f9      	b.n	8003f94 <memset+0x4>

08003fa0 <__libc_init_array>:
 8003fa0:	b570      	push	{r4, r5, r6, lr}
 8003fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8003fd8 <__libc_init_array+0x38>)
 8003fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8003fdc <__libc_init_array+0x3c>)
 8003fa6:	1b64      	subs	r4, r4, r5
 8003fa8:	10a4      	asrs	r4, r4, #2
 8003faa:	2600      	movs	r6, #0
 8003fac:	42a6      	cmp	r6, r4
 8003fae:	d109      	bne.n	8003fc4 <__libc_init_array+0x24>
 8003fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8003fe0 <__libc_init_array+0x40>)
 8003fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8003fe4 <__libc_init_array+0x44>)
 8003fb4:	f000 f818 	bl	8003fe8 <_init>
 8003fb8:	1b64      	subs	r4, r4, r5
 8003fba:	10a4      	asrs	r4, r4, #2
 8003fbc:	2600      	movs	r6, #0
 8003fbe:	42a6      	cmp	r6, r4
 8003fc0:	d105      	bne.n	8003fce <__libc_init_array+0x2e>
 8003fc2:	bd70      	pop	{r4, r5, r6, pc}
 8003fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc8:	4798      	blx	r3
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7ee      	b.n	8003fac <__libc_init_array+0xc>
 8003fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd2:	4798      	blx	r3
 8003fd4:	3601      	adds	r6, #1
 8003fd6:	e7f2      	b.n	8003fbe <__libc_init_array+0x1e>
 8003fd8:	08004040 	.word	0x08004040
 8003fdc:	08004040 	.word	0x08004040
 8003fe0:	08004040 	.word	0x08004040
 8003fe4:	08004044 	.word	0x08004044

08003fe8 <_init>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr

08003ff4 <_fini>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr
